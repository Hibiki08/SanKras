<?php

namespace app\controllers;

use Yii;
use yii\web\Controller;
use app\models\Opinions;
use yii\data\Pagination;
use app\models\forms\EditOpinionsForm;
use yii\web\UploadedFile;
use yii\web\Response;
use yii\widgets\ActiveForm;
use yii\helpers\Url;
use app\models\Team;
use app\models\Certificates;
use app\components\Cache;
use app\models\Blog;
use app\models\BlogCat;
use yii\web\HttpException;
use yii\helpers\Html;

class AboutController extends Controller {

    use Cache;

    public function init() {
        parent::init(); // TODO: Change the autogenerated stub
        $this->myInit();
    }

    public function actionIndex() {
        $this->view->registerCssFile('/lib/fancyBox-18d1712/source/jquery.fancybox.css');
        $this->view->registerJsFile('/lib/fancyBox-18d1712/lib/jquery.mousewheel-3.0.6.pack.js');
        $this->view->registerJsFile('/lib/fancyBox-18d1712/source/jquery.fancybox.pack.js');

        $team = Team::findAll(['active' => 1]);
        $certificates = Certificates::findAll(['active' => 1]);


        return $this->render('index', [
            'team' => $team,
            'certificates' => $certificates
        ]);
    }

    public function actionOpinions() {
        session_start();
        $opinions = Opinions::find()->orderBy(['id' => SORT_DESC])->where(['active' => 1]);
        $pager = new Pagination(['totalCount' => $opinions->count(), 'pageSize' => Opinions::PAGE_SIZE]);
        $pager->pageSizeParam = false;

        $opinions = $opinions->offset($pager->offset)
            ->limit($pager->limit)
            ->all();

        $form = new EditOpinionsForm();
        $session = Yii::$app->session;
        if (!$session->isActive) {
            $session->open();
        }

        if ($form->load(Yii::$app->request->post()) && $form->validate()) {
                $model = new Opinions();
                $form->photo = UploadedFile::getInstance($form, 'photo');

                $model->name = trim(Html::encode($form->name));
                $model->description = trim(Html::encode($form->description));
                $model->photo = isset($form->photo->name) ? $form->photo->name : '../../system/no-photo.jpg';
                $model->text = trim(Html::encode($form->text));
                $model->active = 0;
                $model->save();

            Yii::$app->mailer->compose()
                ->setFrom(Yii::$app->system->get('email'))
                ->setTo(Yii::$app->system->get('email'))
                ->setSubject('Новый отзыв на сайте')
                ->setHtmlBody('Нужно рассмотреть отзыв на допустимость размещения на сайте.')
                ->send();

            if (isset($form->photo->name)) {
                $id = Yii::$app->db->lastInsertID;

                $path = Opinions::IMG_FOLDER . 'opinion(' . $id . ')/';
                $create = file_exists(Yii::$app->basePath . '/web' . Yii::$app->params['params']['pathToImage'] . $path) ? true: mkdir(Yii::$app->basePath . '/web' . Yii::$app->params['params']['pathToImage'] . $path);
                if ($create) {
                    $form->upload($path, $form->photo);
                }
            }

            $session->set('success', true);
            Yii::$app->getResponse()->redirect(Url::toRoute(['about/opinions']));
            return false;
        }

        return $this->render('opinions', [
            'session' => $session,
            'opinions' => $opinions,
            'pager' => $pager,
            'opins' => $form,
        ]);
    }

    public function actionNews($single = '') {
        $blog = Blog::find()->orderBy(['date' => SORT_DESC])->where(['active' => 1, 'cat_id' => BlogCat::NEWS_ID]);

        if (!empty($single)) {
            $new = $blog->where(['id' => $single])->one();
            $otherNews = Blog::find()->where('id != ' . $single)->andWhere(['active' => 1, 'cat_id' => BlogCat::NEWS_ID])->orderBy(['id' => SORT_DESC])->limit(3)->all();

            $prev = $blog->where('date > \'' . $new->date . '\' OR (date = \'' . $new->date . '\' AND id > ' . $single . ')')->andWhere(['active' => 1, 'cat_id' => BlogCat::NEWS_ID])->orderBy(['date' => SORT_ASC])->limit(1)->one();
            $prev = !is_null($prev) ? $prev : $blog->where('date != \'' . $new->date . '\' OR (date = \'' . $new->date . '\' AND id != ' . $single . ')')->andWhere(['active' => 1, 'cat_id' => BlogCat::NEWS_ID])->orderBy(['date' => SORT_ASC])->limit(1)->one();
            $prev = !is_null($prev) ? $prev->id : null;

            $next = $blog->where('date < \'' . $new->date . '\' OR (date = \'' . $new->date . '\' AND id < ' . $single . ')')->andWhere(['active' => 1, 'cat_id' => BlogCat::NEWS_ID])->orderBy(['date' => SORT_DESC])->limit(1)->one();
            $next = !is_null($next) ? $next : $blog->where('date != \'' . $new->date . '\' OR (date = \'' . $new->date . '\' AND id != ' . $single . ')')->andWhere(['active' => 1, 'cat_id' => BlogCat::NEWS_ID])->limit(1)->one();
            $next = !is_null($next) ? $next->id : null;


            if (!empty($new)) {
                return $this->render('news_single', [
                    'new' => $new,
                    'other' => $otherNews,
                    'prev' => $prev,
                    'next' => $next
                ]);
            } else {
                throw new HttpException(404 ,'Такой страницы нет!');
            }

        }

        $pager = new Pagination(['totalCount' => $blog->count(), 'pageSize' => Blog::NEWS_SIZE]);
        $pager->pageSizeParam = false;

        $blog = $blog->offset($pager->offset)
            ->limit($pager->limit)
            ->all();

        return $this->render('news', [
            'news' => $blog,
            'pager' => $pager,
        ]);
    }

    public function actionArticles($single = '', $group = '') {
        $where = '(category.parent_id = ' . BlogCat::ART_ID . ' OR blog.cat_id = ' . BlogCat::ART_ID . ') AND blog.active = 1';
        $blog = new Blog;
        $blog = $blog->getAllCat($where, ['blog.date' => SORT_DESC], false);

        if (!empty($single)) {
            $article = $blog->where(['blog.id' => $single])->one();
            $otherArticles = $blog->where('blog.id != ' . $single)->andWhere($where)->orderBy(['blog.date' => SORT_DESC])->limit(3)->all();

            $prev = $blog->where('blog.date > \'' . $article->date . '\' OR (blog.date = \'' . $article->date . '\' AND blog.id > ' . $single . ')')->andWhere($where)->orderBy(['date' => SORT_ASC])->limit(1)->one();
            $prev = !is_null($prev) ? $prev : $blog->where('blog.date != \'' . $article->date . '\' OR (blog.date = \'' . $article->date . '\' AND blog.id != ' . $single . ')')->andWhere($where)->orderBy(['blog.date' => SORT_ASC])->limit(1)->one();
            $prev = !is_null($prev) ? $prev->id : null;

            $next = $blog->where('blog.date < \'' . $article->date . '\' OR (blog.date = \'' . $article->date . '\' AND blog.id < ' . $single . ')')->andWhere($where)->orderBy(['blog.date' => SORT_DESC])->limit(1)->one();
            $next = !is_null($next) ? $next : $blog->where('blog.date != \'' . $article->date . '\' OR (blog.date = \'' . $article->date . '\' AND blog.id != ' . $single . ')')->andWhere($where)->limit(1)->one();
            $next = !is_null($next) ? $next->id : null;


            if (!empty($article)) {
                return $this->render('art_single', [
                    'article' => $article,
                    'other' => $otherArticles,
                    'prev' => $prev,
                    'next' => $next
                ]);
            } else {
                throw new HttpException(404 ,'Такой страницы нет!');
            }

        }

        if (!empty($group)) {
            $blog = $blog->andWhere(['blog.cat_id' => $group]);
        }

        $cat = new BlogCat();
        $categories = $cat->find()->where('parent_id IS NOT NULL')->all();
        $parentCat = [];
        foreach ($categories as $item) {
            $parentCat[$item->id] = $item->description;
        }

        $pager = new Pagination(['totalCount' => $blog->count(), 'pageSize' => Blog::ART_SIZE]);
        $pager->pageSizeParam = false;

        $blog = $blog->offset($pager->offset)
            ->limit($pager->limit)
            ->all();

        return $this->render('articles', [
            'articles' => $blog,
            'pager' => $pager,
            'categories' => $parentCat,
        ]);
    }

}